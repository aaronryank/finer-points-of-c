THE FINER POINTS OF C :|: ARRAY INDEXES
Corresponding C source: "indexes.c"

Many people like to write array[index] to save the trouble of using pointers.
It's certainly easier, but did you know that array[index] is equivalent to *(array + index)?
You may have wondered why something of this sort works:

int foo(char *bar)
{
    bar[0] = "f";
    bar[1] = "o";
    bar[2] = "o";
}

What's really happening here is:

int foo(char *bar)
{
    *(bar+0) = "f";   // *(bar) if optimized by compiler
    *(bar+1) = "o";
    *(bar+2) = "o";
}

Well, it's because you're not really using an index. An index is just a fancy/shortened way to operate on pointers.
I may have lied. array[index] isn't technically correct, as it can be written as index[array] with the same functionality.
That being said, array_or_index_but_probably_array[array_or_index_but_probably_index] would've been a *bit* more confusing.
Look at the example in "indexes.c" to get a grasp on exactly how array[index] functions.
